#server
server:   
  port: 8081
#  ssl:
#    key-store: classpath:test.jks
#    key-store-password: 123456
#http:
#  port: 8081
  
#eureka:
 # client:
  #  serviceUrl:
   #   defaultZone: http://user:password111@172.16.2.11:8761/eureka/
  #instance:
   # prefer-ip-address: true
    #leaseRenewalIntervalInSeconds: 10
    #leaseExpirationDurationInSeconds: 30
feign: 
  hystrix:  
    enabled: true 
eureka:
  client:
    serviceUrl: 
      defaultZone: http://user:password111@172.16.3.131:8761/eureka/
  instance:
#    ip-address: 172.16.3.131
    prefer-ip-address: true
#    hostname:  ${spring.cloud.client.ipAddress}
#    instance-id: ${spring.cloud.client.ipAddress}:${server.port}
    instance-id: ${spring.application.name}:${spring.cloud.client.ipAddress}:${spring.application.instance_id:${server.port}}
#    leaseRenewalIntervalInSeconds: 10
#    leaseExpirationDurationInSeconds: 30
#    statusPageUrl: http://${eureka.hostname}/info
#    healthCheckUrl: http://${eureka.hostname}/health
#    homePageUrl: http://${eureka.hostname}/

#datasource
spring:
    application:
      name: m-provider-user
#    cloud:
#     inetutils:
#        use-only-site-local-interfaces: true
       
    sleuth: 
      sampler:
        percentage: 100.0
        
    rabbitmq:
      host: 172.16.3.131
      port: 5672
      username: rabbit
      password: passwd
    datasource:
        name: mic_db
        url: jdbc:mysql://172.16.3.131:3306/mic_db?useSSL=false&useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
        username: radlly
        password: radlly.XU82!
        # 使用druid数据源
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        # 下面为连接池的补充设置，应用到上面所有数据源中
        # 初始化大小，最小，最大
        initialSize: 5
        minIdle: 5
        maxActive: 20
        # 配置获取连接等待超时的时间
        maxWait: 3000
        # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        timeBetweenEvictionRunsMillis: 60000
        # 配置一个连接在池中最小生存的时间，单位是毫秒
        minEvictableIdleTimeMillis: 300000
        validationQuery: SELECT 'x'
        testWhileIdle: true
        testOnBorrow: false
        testOnReturn: false
        # 打开PSCache，并且指定每个连接上PSCache的大小
        poolPreparedStatements: true
        maxPoolPreparedStatementPerConnectionSize: 20
        # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
        spring.datasource.filters: stat,wall,log4j
        # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
        connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
        # 合并多个DruidDataSource的监控数据
        #useGlobalDataSourceStat: true
        debug: true    
    #redis
    redis:
      # Redis服务器地址
      host: 172.16.3.131
      # Redis服务器连接端口
      port: 6379
      # Redis服务器连接密码（默认为空）
      password:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 100
        # 控制一个pool最多有多少个状态为idle(空闲的)的jedis实例
        max-idle: 100
        # 控制一个pool最少有多少个状态为idle(空闲的)的jedis实例
        min-idle: 0
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        # 表示当borrow(引入)一个jedis实例时，最大的等待时间，如果超过等待时间(毫秒)，则直接抛出JedisConnectionException；
        max-wait: 1000
      # 连接超时时间（毫秒）
      timeout: 2000
#debug: true
# mybatis_config
mybatis:
    mapper-locations: classpath:mapper/**/*.xml
logging:
    config: classpath:logback-spring.xml

request:
  unsafe: 
    startWith: /getByName #split with ","